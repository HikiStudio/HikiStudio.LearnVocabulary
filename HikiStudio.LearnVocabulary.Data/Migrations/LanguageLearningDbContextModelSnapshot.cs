// <auto-generated />
using System;
using HikiStudio.LearnVocabulary.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HikiStudio.LearnVocabulary.Data.Migrations
{
    [DbContext(typeof(LanguageLearningDbContext))]
    partial class LanguageLearningDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1db1200-1bb6-4156-9da3-135e91d94aba"),
                            ConcurrencyStamp = "9831d75a-11cb-47f8-a0f3-2869fd2d4312",
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 303, DateTimeKind.Local).AddTicks(15),
                            Description = "Administrator Role",
                            IsDeleted = false,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c489f858-aabd-4264-96c1-5cdca251d871"),
                            ConcurrencyStamp = "289b90f1-5da3-44f4-8cd0-bfcc021f0bd6",
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 303, DateTimeKind.Local).AddTicks(35),
                            Description = "Team Members Role",
                            IsDeleted = false,
                            Name = "teamMembers",
                            NormalizedName = "TEAMMEMBERS"
                        },
                        new
                        {
                            Id = new Guid("71b1b0a6-7eab-476c-b177-1d37e120184c"),
                            ConcurrencyStamp = "e95bbd76-293c-41a0-8fc4-37e9ccd3e07f",
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 303, DateTimeKind.Local).AddTicks(39),
                            Description = "Creator Role",
                            IsDeleted = false,
                            Name = "creator",
                            NormalizedName = "CREATOR"
                        },
                        new
                        {
                            Id = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            ConcurrencyStamp = "dd618d51-ca12-4a5f-9dbe-5972b309707b",
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 303, DateTimeKind.Local).AddTicks(43),
                            Description = "Reader Role",
                            IsDeleted = false,
                            Name = "reader",
                            NormalizedName = "READER"
                        });
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AppUserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePasswordChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCreateAppUserWithThirdParty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsOTPVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OTP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("OTPExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImageURL")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            AccessFailedCount = 0,
                            AppUserTypeId = 0,
                            ConcurrencyStamp = "9672b76e-3d48-4c42-9a0b-129744242bab",
                            DOB = new DateTime(2001, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranquangbdhz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tran",
                            GenderId = 1,
                            IsCreateAppUserWithThirdParty = false,
                            IsDeleted = false,
                            IsPasswordChanged = false,
                            LastName = "Quang",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANQUANGBDHZ@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEC5wd4u3BZ2m5zJrYRwSoxxpe25jfl8VI9sCQVW1gXldw/jG6fijG3VT3y8yIgGLWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserImageURL = "",
                            UserName = "quangbdhz"
                        },
                        new
                        {
                            Id = new Guid("0ae34db7-ea08-42d2-9aef-098efcdd2c1e"),
                            AccessFailedCount = 0,
                            AppUserTypeId = 0,
                            ConcurrencyStamp = "9aa2cf71-bf50-42ee-aae7-5eadebc0f9e1",
                            DOB = new DateTime(2000, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePasswordChanged = new DateTime(2023, 11, 2, 21, 37, 26, 316, DateTimeKind.Local).AddTicks(7657),
                            Email = "hikistudio@hiki.space",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            GenderId = 2,
                            IsCreateAppUserWithThirdParty = false,
                            IsDeleted = false,
                            IsPasswordChanged = true,
                            LastName = "HikiStudio",
                            LockoutEnabled = false,
                            NormalizedEmail = "HIKISTUDIO@HIKI.SPACE",
                            NormalizedUserName = "HIKISTUDIO",
                            PasswordHash = "AQAAAAEAACcQAAAAENBjDWxlx8ZtIK6jjPnmrk8zOoGv8P+u5abQZTdQUdf0kCxxIAxbSIO07gGfVJD/rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserImageURL = "",
                            UserName = "hikistudio"
                        },
                        new
                        {
                            Id = new Guid("3e3245cb-bc7b-4c08-ad09-72fbd736fc9a"),
                            AccessFailedCount = 0,
                            AppUserTypeId = 0,
                            ConcurrencyStamp = "3dbeec78-0244-4e6d-94e4-ef4c4bad8ca4",
                            DOB = new DateTime(1990, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePasswordChanged = new DateTime(2023, 11, 2, 21, 37, 26, 323, DateTimeKind.Local).AddTicks(6665),
                            Email = "lionelmessi@hiki.space",
                            EmailConfirmed = true,
                            FirstName = "Lionel",
                            GenderId = 1,
                            IsCreateAppUserWithThirdParty = false,
                            IsDeleted = false,
                            IsPasswordChanged = true,
                            LastName = "Messi",
                            LockoutEnabled = false,
                            NormalizedEmail = "LIONELMESSI@HIKI.SPACE",
                            NormalizedUserName = "YUKINO",
                            PasswordHash = "AQAAAAEAACcQAAAAEDLqrGMzLekH6xzR+e5lfBv2UPgZMe9sZD3WzVmJQaYGh82rZF5EOdsZ98GBaiq5eA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserImageURL = "",
                            UserName = "lionelmessi"
                        },
                        new
                        {
                            Id = new Guid("d8682aa6-255a-4b31-aeaa-1aff35a8be58"),
                            AccessFailedCount = 0,
                            AppUserTypeId = 0,
                            ConcurrencyStamp = "341a6481-dec7-4591-955b-8c91fe66dff1",
                            DOB = new DateTime(2001, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePasswordChanged = new DateTime(2023, 11, 2, 21, 37, 26, 330, DateTimeKind.Local).AddTicks(5218),
                            Email = "creator@hiki.space",
                            EmailConfirmed = true,
                            FirstName = "Creator",
                            GenderId = 2,
                            IsCreateAppUserWithThirdParty = false,
                            IsDeleted = false,
                            IsPasswordChanged = true,
                            LastName = "HikiStudio",
                            LockoutEnabled = false,
                            NormalizedEmail = "CREATOR@HIKI.SPACE",
                            NormalizedUserName = "CREATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJgyS5aOSv+EMoxzm2wnMBuU+6n2HbwxRswGBIuDlzTKn+McRaA0IlQPUxnE0KgrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserImageURL = "",
                            UserName = "creator"
                        },
                        new
                        {
                            Id = new Guid("4354acbc-a32a-4a28-b865-deb49695171f"),
                            AccessFailedCount = 0,
                            AppUserTypeId = 0,
                            ConcurrencyStamp = "5f5f2f6a-a0c4-4e8a-b63d-515dfb90f71e",
                            DOB = new DateTime(2001, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatePasswordChanged = new DateTime(2023, 11, 2, 21, 37, 26, 337, DateTimeKind.Local).AddTicks(3629),
                            Email = "reader@hiki.space",
                            EmailConfirmed = true,
                            FirstName = "Reader",
                            GenderId = 3,
                            IsCreateAppUserWithThirdParty = false,
                            IsDeleted = false,
                            IsPasswordChanged = true,
                            LastName = "HikiStudio",
                            LockoutEnabled = false,
                            NormalizedEmail = "READER@HIKI.SPACE",
                            NormalizedUserName = "READER",
                            PasswordHash = "AQAAAAEAACcQAAAAEFHae+DnmjlchTjwLao4MMBER79VptmhSMxSfMxjhP+GTROVMub9xNIKcD2ZK+oP5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserImageURL = "",
                            UserName = "reader"
                        });
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppUserLogin", b =>
                {
                    b.Property<int>("AppUserLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserLoginId"), 1L, 1);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppUserLoginId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.HasKey("UserId", "RoleId", "AppUserRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            RoleId = new Guid("e1db1200-1bb6-4156-9da3-135e91d94aba"),
                            AppUserRoleId = new Guid("ca714a3b-6500-43b7-a1f6-14de2c84f0e9")
                        },
                        new
                        {
                            UserId = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            RoleId = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            AppUserRoleId = new Guid("a6debbc6-bb53-4f57-be91-9eee05499c94")
                        },
                        new
                        {
                            UserId = new Guid("0ae34db7-ea08-42d2-9aef-098efcdd2c1e"),
                            RoleId = new Guid("e1db1200-1bb6-4156-9da3-135e91d94aba"),
                            AppUserRoleId = new Guid("7467685b-0f44-4352-a9f9-3cae8b60e0b9")
                        },
                        new
                        {
                            UserId = new Guid("0ae34db7-ea08-42d2-9aef-098efcdd2c1e"),
                            RoleId = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            AppUserRoleId = new Guid("2cc6a853-6563-4892-8a46-3781969f544a")
                        },
                        new
                        {
                            UserId = new Guid("3e3245cb-bc7b-4c08-ad09-72fbd736fc9a"),
                            RoleId = new Guid("c489f858-aabd-4264-96c1-5cdca251d871"),
                            AppUserRoleId = new Guid("8d1de9d9-8903-4783-97cc-7ba128615945")
                        },
                        new
                        {
                            UserId = new Guid("3e3245cb-bc7b-4c08-ad09-72fbd736fc9a"),
                            RoleId = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            AppUserRoleId = new Guid("68488130-0ebc-4e51-a602-e010777fbf29")
                        },
                        new
                        {
                            UserId = new Guid("d8682aa6-255a-4b31-aeaa-1aff35a8be58"),
                            RoleId = new Guid("71b1b0a6-7eab-476c-b177-1d37e120184c"),
                            AppUserRoleId = new Guid("a3dd1145-7815-4dbd-8e96-8d8c56a2d2f9")
                        },
                        new
                        {
                            UserId = new Guid("d8682aa6-255a-4b31-aeaa-1aff35a8be58"),
                            RoleId = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            AppUserRoleId = new Guid("b81a9917-77c0-48c1-8945-86a3db37d3dd")
                        },
                        new
                        {
                            UserId = new Guid("4354acbc-a32a-4a28-b865-deb49695171f"),
                            RoleId = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            AppUserRoleId = new Guid("a7dc5930-0067-4742-96ba-6467e29b39db")
                        });
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppUserToken", b =>
                {
                    b.Property<int>("AppUserTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserTokenId"), 1L, 1);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppUserTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AudioClip", b =>
                {
                    b.Property<long>("AudioClipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AudioClipID"), 1L, 1);

                    b.Property<string>("AudioURL")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PronunciationTypeID")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("VocabularyWordID")
                        .HasColumnType("bigint");

                    b.HasKey("AudioClipID");

                    b.HasIndex("PronunciationTypeID");

                    b.HasIndex("VocabularyWordID");

                    b.ToTable("AudioClips", (string)null);
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageID"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguageID");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            LanguageID = 1,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 337, DateTimeKind.Local).AddTicks(3706),
                            IsDeleted = false,
                            LanguageName = "English"
                        });
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.PronunciationType", b =>
                {
                    b.Property<int>("PronunciationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PronunciationTypeID"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PronunciationTypeName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PronunciationTypeID");

                    b.ToTable("PronunciationTypes", (string)null);

                    b.HasData(
                        new
                        {
                            PronunciationTypeID = 1,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 337, DateTimeKind.Local).AddTicks(3757),
                            Description = "",
                            IsDeleted = false,
                            PronunciationTypeName = "Vocal US"
                        },
                        new
                        {
                            PronunciationTypeID = 2,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 337, DateTimeKind.Local).AddTicks(3759),
                            Description = "",
                            IsDeleted = false,
                            PronunciationTypeName = "Vocal UK"
                        });
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.VocabularyType", b =>
                {
                    b.Property<int>("VocabularyTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VocabularyTypeID"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VocabularyTypeName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("VocabularyTypeID");

                    b.ToTable("VocabularyTypes", (string)null);

                    b.HasData(
                        new
                        {
                            VocabularyTypeID = 1,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 337, DateTimeKind.Local).AddTicks(3729),
                            IsDeleted = false,
                            VocabularyTypeName = "900 Vocabulary"
                        },
                        new
                        {
                            VocabularyTypeID = 2,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 337, DateTimeKind.Local).AddTicks(3731),
                            IsDeleted = false,
                            VocabularyTypeName = "Adjective"
                        },
                        new
                        {
                            VocabularyTypeID = 3,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 337, DateTimeKind.Local).AddTicks(3732),
                            IsDeleted = false,
                            VocabularyTypeName = "Adverb"
                        },
                        new
                        {
                            VocabularyTypeID = 4,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 337, DateTimeKind.Local).AddTicks(3734),
                            IsDeleted = false,
                            VocabularyTypeName = "Verb"
                        },
                        new
                        {
                            VocabularyTypeID = 5,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 337, DateTimeKind.Local).AddTicks(3735),
                            IsDeleted = false,
                            VocabularyTypeName = "Reading"
                        },
                        new
                        {
                            VocabularyTypeID = 6,
                            CreatedBy = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            DateCreated = new DateTime(2023, 11, 2, 21, 37, 26, 337, DateTimeKind.Local).AddTicks(3737),
                            IsDeleted = false,
                            VocabularyTypeName = "Listening"
                        });
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.VocabularyWord", b =>
                {
                    b.Property<long>("VocabularyWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VocabularyWordID"), 1L, 1);

                    b.Property<string>("Antonyms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ExampleSentence")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Pronunciation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Synonyms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VocabularyTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("VocabularyWordID");

                    b.HasIndex("LanguageID");

                    b.HasIndex("VocabularyTypeID");

                    b.ToTable("VocabularyWords", (string)null);
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("HikiStudio.LearnVocabulary.Data.Entities.AppRole", "AppRole")
                        .WithMany("AppRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppUserClaim", b =>
                {
                    b.HasOne("HikiStudio.LearnVocabulary.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppUserLogin", b =>
                {
                    b.HasOne("HikiStudio.LearnVocabulary.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppUserRole", b =>
                {
                    b.HasOne("HikiStudio.LearnVocabulary.Data.Entities.AppRole", "AppRole")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiStudio.LearnVocabulary.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppUserToken", b =>
                {
                    b.HasOne("HikiStudio.LearnVocabulary.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AudioClip", b =>
                {
                    b.HasOne("HikiStudio.LearnVocabulary.Data.Entities.PronunciationType", "PronunciationType")
                        .WithMany("AudioClips")
                        .HasForeignKey("PronunciationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiStudio.LearnVocabulary.Data.Entities.VocabularyWord", "VocabularyWord")
                        .WithMany("AudioClips")
                        .HasForeignKey("VocabularyWordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PronunciationType");

                    b.Navigation("VocabularyWord");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.VocabularyWord", b =>
                {
                    b.HasOne("HikiStudio.LearnVocabulary.Data.Entities.Language", "Language")
                        .WithMany("VocabularyWords")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiStudio.LearnVocabulary.Data.Entities.VocabularyType", "VocabularyType")
                        .WithMany("VocabularyWords")
                        .HasForeignKey("VocabularyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("VocabularyType");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppRole", b =>
                {
                    b.Navigation("AppRoleClaims");

                    b.Navigation("AppUserRoles");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.AppUser", b =>
                {
                    b.Navigation("AppUserClaims");

                    b.Navigation("AppUserLogins");

                    b.Navigation("AppUserRoles");

                    b.Navigation("AppUserTokens");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.Language", b =>
                {
                    b.Navigation("VocabularyWords");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.PronunciationType", b =>
                {
                    b.Navigation("AudioClips");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.VocabularyType", b =>
                {
                    b.Navigation("VocabularyWords");
                });

            modelBuilder.Entity("HikiStudio.LearnVocabulary.Data.Entities.VocabularyWord", b =>
                {
                    b.Navigation("AudioClips");
                });
#pragma warning restore 612, 618
        }
    }
}
